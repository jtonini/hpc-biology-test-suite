#!/bin/bash
#SBATCH --job-name=kraken2_test
#SBATCH --output=kraken2_test_%j.out
#SBATCH --error=kraken2_test_%j.err
#SBATCH --time=00:30:00
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --mem=4GB
#SBATCH --partition=testing

# Kraken2 taxonomic classification test script

echo "=== Kraken2 Taxonomic Classification Test ==="
echo "Job ID: $SLURM_JOB_ID"
echo "Node: $SLURMD_NODENAME"
echo "Date: $(date)"
echo "Working directory: $(pwd)"
echo "=============================================="

# Set up application paths
export PATH="/opt/sw/pub/apps:$PATH"
export PATH="/opt/sw/pub/apps/kraken2:$PATH"

# Load modules if needed (uncomment and modify as needed)
# module load kraken2

# Create working directory
WORK_DIR="kraken2_test_${SLURM_JOB_ID}"
mkdir -p $WORK_DIR
cd $WORK_DIR

echo "Working in directory: $(pwd)"

# Check if Kraken2 is available
echo -e "\n1. CHECKING KRAKEN2 INSTALLATION"
echo "================================"
if command -v kraken2 &> /dev/null; then
    echo "PASS: Kraken2 found: $(which kraken2)"
    kraken2 --version
    KRAKEN2_CMD="kraken2"
else
    echo "FAIL: Kraken2 not found in PATH"
    echo "Please ensure Kraken2 is installed and available"
    exit 1
fi

# Check for additional tools
echo -e "\nChecking Kraken2 utilities:"
for util in kraken2-build kraken2-inspect; do
    if command -v $util &> /dev/null; then
        echo "PASS: $util found"
    else
        echo "INFO: $util not found (may not be needed for basic testing)"
    fi
done

# Create test sequence data
echo -e "\n2. CREATING TEST SEQUENCE DATA"
echo "=============================="
echo "Generating synthetic metagenomic sequences for testing..."

# Create test FASTA file with sequences from different organisms
cat > test_sequences.fasta << 'EOF'
>seq001_Escherichia_coli
ATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGACGCGTACAGGAAACACAGAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTCGACCAAAGGTAACGAGGTAACAACCATGCGAGTGTTGAAGTTCGGCGGTACATCAGTGGCAAATGCAGAACGTTTTCTGCGTGTTGCCGATATTCTGGAAAGCAATGCCAGGCAGGGGCAGGTGGCCACCGTCCTCTCTGCCCCCGCCAAAATCACCAACCACCTGGTGGCGATGATTGAAAAAACCATTAGCGGCCAGGATGCTTTACCCAATATCAGCGATGCCGAACGTATTTTTGCCGAACTTTTGACGGGACTCGCCGCCGCCCAGCCGGGGTTCCCGCTGGCGCAATTGAAAACTTTCGTCGATCAGGAATTTGCCCAAATAAAACATGTCCTGCATGGCATTAGTTTGTTGGGGCAGTGCCCGGATAGCATCAACGCTGCGCTGATTTGCCGTGGCGAGAAAATGTCGATCGCCATTATGGCCGGCGTGTTAGAAGCGCGTGGTCACAACGTTACCGTTATCGATCCGGTCGAAAAACTGCTGGCAGTGGGGCATTACCTCGAATCTACCGTCGATATTGCTGAGTCCACCCGCCGTATTGCGGCAAGCCGCATTCCGGCTGATCACATGGTGCTGATGGCAGGTTTCACCGCCGGTAATGAAAAAGGCGAACTGGTGGTGCTTGGACGCAACGGTTCCGACTACTCTGCTGCGGTGCTGGCTGCCTGTTTACGCGCCGATTGTTGCGAGATTTGGACGGACGTTGACGGGGTCTATACCTGCGACCCGCGTCAGGTGCCCGATGCGAGGTTGTTGAAGTCGATGTCCTACCAGGAAGCGATGGAGCTTTCCTACTTCGGCGCTAAAGTTCTTCACCCCCGCACCATTACCCCCATCGCCCAGTTCCAGATCCCTTGCCTGATTAAAAATACCGGAAATCCTCAAGCACCAGGTACGCTCATTGGTGCCAGCCGTGATGAAGACGAATTACCGGTCAAGGGCATTTCCAATCTGAATAACATGGCAATGTTCAGCGTTTCTGGTCCGGGGATGAAAGGGATGGTCGGCATGGCGGCGCGCGTCTTTGCAGCGATGTCACGCGCCCGTATTTCCGTGGTGCTGATTACGCAATCATCTTCCGAATACAGCATCAGTTTCTGCGTTCCACAAAGCGACTGTGTGCGAGCTGAACGGGCAATGCAGGAAGAGTTCTACCTGGAACTGAAAGAAGGCTTACTGGAGCCGCTGGCAGTGACGGAACGGCTGGCCATTATCTCGGTGGTAGGTGATGGTATGCGCACCTTGCGTGGGATCTCGGCACCGAAGGTGCCGGACGACTTGCACACTGCCGAGTTCCAGTCTCTGATGGTTCACCAAAACGTTCCGTGGAACTACCTGGAAGAGAAGGGCTACAGCGCGCTGGAAAAGGTTGACTTGTCCAAGGAAGCTGGCGGCTTGACGTTCCACCCGCGTGTCACCGCCAGACAGTAACTCGATCGCACCAAAACCCCTGCCAGATGGCCAGAATAGCGACGGAAAGTCAAGGACACCGCCTGATCAACCTGCGCTCCGGAGCTCGGTCACCAGAAGCTCACGTGATGGCCGGAATGGCTGACGGGGAACAGCTGTCGGTCCAGCTCGTGGCCGGCATGTCTATGGGGACAGTAGGCGGAGCGATAGCCGAGGCCGCCGACAGCAGCCGCCTGAGCTGCAGCGCGAGTGCGGTCGGAAGGATCAAGGGTGCCATTTCTGACCCGCTGGGATCCGGATTGAACGGCATGACCGACTTCGCGAACACCCCGCTGAATCTGCTGATGAACGGCAGCCGCAATGAACTCAATCGCCACCAGGAACGCCCGTTTGGCATCAAACACAGCTATAGCGGTGATGCTGGACCTGCACTTGCTACAACTGGATCACCCTCAGGTGAACAACAGGCGTTTCGGAGAAATGAGCGGCCCAGGGCTTTCATACCCGATCATCTCTTACTGGCAACTCCAGGAGAGTTTGATGAAGCGGAGCATCAGCAGGAACAGCAGCAGCCGGCCAAAGAAGGCGGAACCCCGACCCTCAATGACAGTGTCCAGTCCAGCGCATCAGGAGGCAAGCAGTACAACAAATGGCAGGAAGCCTTTTACCCTTCCATCAACAGCTACCAGTACTGGCTGGCCGATTGCTCCCGGAAGGAGGAAGGCCACGTTACGCTGATGAGGAACAGCACGCTGCTACTTCCGCCCGCTGCCAGGAGACCCTGGCGACCCGTCTGAAAGAAGACCCGCCCCACATCCAGCTGGATGAGGGCGACCAGCCCTTGGTTGAGGAGAATCTGGCCAACCAGCTGGCTTCCCGGAAGGGAAACACACTGGACAATGTAAGGCAAGGCTACAACATCAAAGTGGAGAAGACGGCCGGCTTCGATCCCGCCGGGCTGAAACGCCAGGAAGAAAGACGGCTGTACTGGGTCGAGGAGAAGTACTATCCGGACTTCAACCTGAAGTGCAACGCAACGGGCCAGCTCACCCGGATGACCCTGATGGAGTTCGACGTGGTCATTCCGAACGTCACCACCGGCTGCGCCACCACGGCCATGGAGGATGGCACCATCTACTTGTCCAGAGTGGGACACTACCCCACCGGCGAAGATAAGGCCGTGTGGCTGGTGAACACCAACGACGTCCGAGGGAAGTCTGTCAACACGTCGGCCGAAACGCCGGATGTGGAGGGTGTCGTCAAACCCATCGGCAACGGCGAAGGAGGCAAGCTGGCGGACACCCTTTCCGCCAGCCAGGGCGTGATCCTGGATGAGCCCCCCGGGGACGGGATCCTGGGTGAGATGAACCCCATCGGGGAAAGCGCCCTTGTCGATGCCGAAGCGATGAAGAACCTGGGACTGTACGAAGATGGCAAGTTCTGGGATCCCACGGTGAAGATGATGAACGGCTACACCACCGATCCCGTCAATGTGGCCGCCATGAAGTTCACCACCTTCCAGGATGCCGTGAAGGACAACCAGCCGATGCCGGGATGGGACGATGGTGTCAACTTCTCCTCCATCACCGGCGAACGCCAGACCTCGGCCATTGCCCTGGCCCACAGCCAGGCCAACGGGGCTGTCTATGCCAACTGGATGGACTGCCGCCATTCCAGCGATGAGCAGGAGAACTAATCATCCTCCAGAACCAACCCGAGGATTGATGGCCAGGAGGCAATCAACGTCAGAAAGGGCAAGGGCCGCGCCGAAGCCATTCAGGTGGCAAACAACCTGATGACAGGCCTGCTGGCCCTGGATGCCAACCTGGGGGCGAAAGGAGGCAAGCTGGCCGATGGCAACCAGGGTGCCGGGATGATCATCAACCGTCTGATGGGCGAAGGCCTGCTGTTTGCCACCGAATAA
>seq002_Salmonella_enterica
ATGAGCAAAAGCAAACAGCACATGGAGCTGCTCGCACGTTTTGTCACGCTGCTGGCGCTGCCGGTTGCCGGTTTTGCGGTTGGCATCGTGGTTGGCATGGTGGTGTTTGGGGCGCTGGCGGCGCTGGCGGTGGGGGCGCTGGCGGCGCTGGCGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGCGCTGGCGGCGCTGGCGGGGGGC
>seq003_Staphylococcus_aureus
TTGAAAGCAGACAAATCTTCAGACGGTATCGACATCTCCGATGACATCGAAGAGAGACAGATCCATTTCGAAATCTCCAACATCAACTACTACGATGCCGCTGAACAAGCCAACGCACAAGTACGCACATTGGCGGATGCGATGGACTTTGCCGAGCAGTTGGCCAACGTCAAGACCGACGTTGAGGACCTGATGGACTTCGAACGGCTGGCCAAACATGGCCACGATGTCGTGTGGTTCCAGCTGACGCTGATCGAAATCGGCGAGACGACGGGCGGCAACATCAACCTGGCCACGATCACCGTGACCAACGCCGCTGGCGGCGCCATGGACGAGCTGATGATCGACTTCGGCACCAACCACGTCGACGACTTCGAGCCGGACGAGACCACGACCATCTCCACCAAGAAGATCATCGGCGAATTCGGCCACCGGCTGAAGGCGATCATCAACGGCCTGATCACCGAGCTGACCGAGGAGATCAACATCGCCACCGCGATCATCATCGACGACATCGACATCACCATCGAGATCGCCACCGACATCACCAACATCACCACCGCCACCGAGATCACCACCGCAACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCGAGATCACCACCGCCACCG
>seq004_Human_mitochondria
GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATTCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAACAATTGAATGTCTGCACAGCCGCTTTCCACACAGACATCATAACAAAAAATTTCCACCAAACCCCCCCTCCCCCGCTTCTGGCCACAGCACTTAAACACATCTCTGCCAAACCCCAAAAACAAAGAACCCTAACACCAGCCTAACCAGATTTCAAATTTTATCTTTTGGCGGTATGCACTTTTAACAGTCACCCCCCAACTAACACATTATTTTCCCCTCCCACTCCCATACTACTAATCTCATCAATACAACCCCCGCCCATCCTACCCAGCACACACACACCGCTGCTAACCCCATACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGTTTATGTAGCTTACCTCCTCAAAGCAATACACTGAAAATGTTTAGACGGGCTCACATCACCCCATAAACAAATAGGTTTGGTCCTAGCCTTTCTATTAGCTCTTAGTAAGATTACACATGCAAGCATCCCCGTTCCAGTGAGTTCACCCTCTAAATCACCACGATCAAAAGGAACAAGCATCAAGCACGCAGCAATGCAGCTCAAAACGCTTAGCCTAGCCACACCCCCACGGGAAACAGCAGTGATTAACCTTTAGCAATAAACGAAAGTTTAACTAAGCTATACTAACCCCAGGGTTGGTCAATTTCGTGCCAGCCACCGCGGTCACACGATTAACCCAAGTCAATAGAAGCCGGCGTAAAGAGTGTTTTAGATCACCCCCTCCCCAATAAAGCTAAAACTCACCTGAGTTGTAAAAAACTCCAGTTGACACAAAATAGACTACGAAAGTGGCTTTAACATATCTGAACACACAATAGCTAAGACCCAAACTGGGATTAGATACCCCACTATGCTTAGCCCTAAACCTCAACAGTTAAATCAACAAAACTGCTCGCCAGAACACTACGAGCCACAGCTTAAAACTCAAAGGACCTGGCGGTGCTTCATATCCCTCTAGAGGAGCCTGTTCTGTAATCGATAAACCCCGATCAACCTCACCACCTCTTGCTCAGCCTATATACCGCCATCTTCAGCAAACCCTGATGAAGGCTACAAAGTAAGCGCAAGTACCCACGTAAAGACGTTAGGTCAAGGTGTAGCCCATGAGGTGGCAAGAAATGGGCTACATTTTCTACCCCAGAAAACTACGATAGCCCTTATGAAACTTAAGGGTCGAAGGTGGATTTAGCAGTAAACTAAGAGTAGAGTGCTTAGTTGAACAGGGCCCTGAAGCGCGTACACACCGCCCGTCACCCTCCTCAAGTATACTTCAAAGGACATTTAACTAAAACCCCTACGCATTTATATAGAGGAGACAAGTCGTAACATGGTAAGTGTACTGGAAAGTGCACTTGGACGAACCAGAGTGTAGCTTAACACAAAGCACCCAACTTACACTTAGGAGATTTCAACTTAACTTGACCGCTCTGAGCTAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGCAATAGATATAGTACCGCAAGGGAAAGATGAAAAATTATAACCAAGCATAATATAGCAAGGACTAACCCCTATACCTTCTGCATAATGAATTAACTAGAAATAACTTTGCAAGGAGAGCCAAAGCTAAGACCCCCGAAACCAGACGAGCTACCTAAGAACAGCTAAAAGAGCACACCCGTCTATGTAGCAAAATAGTGGGAAGATTTATAGGTAGAGGCGACAAACCTACCGAGCCTGGTGATAGCTGGTTGTCCAAGATAGAATCTTAGTTCAACTTTAAATTTGCCCACAGAACCCTCTAAATCCCCTTGTAAATTTAACTGTTAGTCCAAAGAGGAACAGCTCTTTGGACACTAGGAAAAAACCTTGTAGAGAGAGTAAAAAATTTAACACCCATAGTAGGCCTAAAAGCAGCCACCAATTAAGAAAGCGTTCAAGCTCAACACCCACTACCTAAAAAATCCCAAACATATAACTGAACTCCTCACACCCAATTGGACCAATCTATCACCCTATAGAAGAACTAATGTTAGTATAAGTAACATGAAAACATTCTCCTCCGCATAAGCCTGCGTCAGATTAAAACACTGAACTGACAATTAACAGCCCAATATCTACAATCAACCAACAAGTCATTATTACCCTCACTGTCAACCCAACACAGGCATGCTCATAAGGAAAGGTTAAAAAAAGTAAAAGGAACTCGGCAAATCTTACCCCGCCTGTTTACCAAAAACATCACCTCTAGCATCACCAGTATTAGAGGCACCGCCTGCCCAGTGACACATGTTTAACGGCCGCGGTACCCTAACCGTGCAAAGGTAGCATAATCACTTGTTCCTTAAATAGGGACCTGTATGAATGGCTCCACGAGGGTTCAGCTGTCTCTTACTTTTAACCAGTGAAATTGACCTGCCCGTGAAGAGGCGGGCATAACACAGCAAGACGAGAAGACCCTATGGAGCTTTAATTTATTAATGCAAACAGTACCTAACAAACCCACAGGTCCTAAACTACCAAACCTGCATTAAAAATTTCGGTTGGGGCGACCTCGGAGCAGAACCCAACCTCCGAGCAGTACATGCTAAGACTTCACCAGTCAAAGCGAACTACTATACTCAATTGATCCAATAACTTGACCAACGGAACAAGTTACCCTAGGGATAACAGCGCAATCCTATTCTAGAGTCCATATCAACAATAGGGTTTACGACCTCGATGTTGGATCAGGACATCCCGATGGTGCAGCCGCTATTAAAGGTTCGTTTGTTCAACGATTAAAGTCCTACGTGATCTGAGTTCAGACCGGAGTAATCCAGGTCGGTTTCTATCTACGTTCAAATTCCTCCCTGTACGAAAGGACAAGAGAAATAAGGCCTACTTCACAAAGCGCCTTCCCCCGTAAATGATATCATCTCAACTTAGTATTATACCCACACCCACCCAAGAACAGGGTTTGTTAAGATGGCAGAGCCCGGTAATCGCATAAAACTTAAAACTTTACAGTCAGAGGTTCAATTCCTCTTCTTAACAACATACCCATGGCCAACCTCCTACTCCTCATTGTACCCATTCTAATCGCAATGGCATTCCTAATGCTTACCGAACGAAAAATTCTAGGCTATATACAACTACGCAAAGGCCCCAACGTTGTAGGCCCCTACGGGCTACTACAACCCTTCGCTGACGCCATAAAACTCTTCACCAAAGAGCCCCTAAAACCCGCCACATCTACCATCACCCTCTACATCACCGCCCCGACCTTAGCTCTCACCATCGCTCTTCTACTATGAACCCCCCTCCCCATACCCAACCCCCTGGTCAACCTCAACCTAGGCCTCCTATTTATTCTAGCCACCTCTAGCCTAGCCGTTTACTCAATCCTCTGATCAGGGTGAGCATCAAACTCAAACTACGCCCTGATCGGCGCACTGCGAGCAGTAGCCCAAACAATCTCATATGAAGTCACCCTAGCCATCATTCTACTATCAACATTACTAATAAGTGGCTCCTTTAACCTCTCCACCCTTATCACAACACAAGAACACCTCTGATTACTCCTGCCATCATGACCCTTGGCCATAATATGATTTATCTCCACACTAGCAGAGACCAACCGAACCCCCTTCGACCTTGCCGAAGGGGAGTCCGAACTAGTCTCAGGCTTCAACATCGAATACGCCGCAGGCCCCTTCGCCCTATTCTTCATAGCCGAATACACAAACATTATTATAATAAACACCCTCACCACTACAATCTTCCTAGGAACAACATATGACGCACTCTCCCCTGAACTCTACACAACATATTTTGTCACCAAGACCCTACTTCTAACCTCCCTGTTCTTATGAATTCGAACAGCATACCCCCGATTCCGCTACGACCAACTCATACACCTCCTATGAAAAAACTTCCTACCACTCACCCTAGCATTACTTATATGATATGTCTCCATACCCATTACAATCTCCAGCATTCCCCCTCAAACCTAAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTATTTCTAGGACTATGAGAATCGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTTATACCCTTCCCGTACTAATTAATCCCCTGGCCCAACCCGTCATCTACTCTACCATCTTTGCAGGCACACTCATCACAGCGCTAAGCTCGCACTGATTTTTTACCTGAGTAGGCCTAGAAATAAACATGCTAGCTTTTATTCCAGTTCTAACCAAAAAAATAAACCCTCGTTCCACAGAAGCTGCCATCAAGTATTTCCTCACGCAAGCAACCGCATCCATAATCCTTCTAATAGCTATCCTCTTCAACAATATACTCTCCGGACAATGAACCATAACCAATACTACCAATCAATACTCATCATTAATAATCATAATAGCTATAGCAATAAAACTAGGAATAGCCCCCTTTCACTTCTGAGTCCCAGAGGTTACCCAAGGCACCCCTCTGACATCCGGCCTGCTTCTTCTCACATGACAAAAACTAGCCCCCATCTCAATCATATACCAAATCTCTCCCTCACTAAACGTAAGCCTTCTCCTCACTCTCTCAATCTTATCCATCATAGCAGGCAGTTGAGGTGGATTAAACCAAACCCAGCTACGCAAAATCTTAGCATACTCCTCAATTACCCACATAGGATGAATAATAGCAGTTCTACCGTACAACCCTAACATAACCATTCTTAATTTAACTATTTATATTATCCTAACTACTACCGCATTCCTACTACTCAACTTAAACTCCAGCACCACGACCCTACTACTATCTCGCACCTGAAACAAGCTAACATGACTAACACCCTTAATTCCATCCACCCTCCTCTCCCTAGGAGGCCTGCCCCCGCTAACCGGCTTTTTGCCCAAATGGGCCATTATCGAAGAATTCACAAAAAACAATAGCCTCATCATCCCCACCATCATAGCCACCATCACCCTCCTTAACCTCTACTTCTACCTACGCCTAATCTACTCCACCTCAATCACACTACTCCCCATATCTAACAACGTAAAAATAAAATGACAGTTTGAACATACAAAACCCACCCCATTCCTCCCCACACTCATCGCCCTTACCACGCTACTCCTACCTATCTCCCCTTTTATACTAATAATCTTATAG
>seq005_unclassified_random
NNNNNGGCTAGCTAGCTANNNNNNATCGATCGATCGATCGNNNNNATCGATCGATCGANNNNNATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGANNNNNATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG
EOF

if [[ -f "test_sequences.fasta" ]]; then
    echo "PASS: Test sequence file created successfully"
    echo "  Sequences: $(grep -c '^>' test_sequences.fasta)"
    echo "  Total length: $(grep -v '^>' test_sequences.fasta | wc -c)"
else
    echo "FAIL: Could not create test sequence file"
    exit 1
fi

# Test 3: Basic classification (without database)
echo -e "\n3. BASIC CLASSIFICATION TEST (NO DATABASE)"
echo "=========================================="
echo "Testing Kraken2 basic functionality without requiring a database..."

# Try to run kraken2 help to ensure it's working
$KRAKEN2_CMD --help > kraken2_help.txt 2>&1

if [[ $? -eq 0 ]] && [[ -f "kraken2_help.txt" ]]; then
    echo "PASS: Kraken2 help command successful"
    echo "  Help file created: kraken2_help.txt"
    
    # Check for key options in help
    if grep -q "classify" kraken2_help.txt; then
        echo "  Classify option found in help"
    fi
    if grep -q "database" kraken2_help.txt; then
        echo "  Database option found in help"
    fi
else
    echo "FAIL: Kraken2 help command failed"
fi

# Test 4: Check for database locations
echo -e "\n4. DATABASE LOCATION CHECK"
echo "========================="
echo "Checking for potential Kraken2 databases..."

# Common database locations
db_locations=(
    "/opt/sw/pub/apps/kraken2/db"
    "/opt/sw/pub/apps/kraken2/databases"
    "/opt/databases/kraken2"
    "/data/kraken2"
    "/home/databases/kraken2"
    "$HOME/kraken2_db"
)

found_db=false
for db_path in "${db_locations[@]}"; do
    if [[ -d "$db_path" ]]; then
        echo "FOUND: Potential database directory at $db_path"
        # Check for typical database files
        if [[ -f "$db_path/hash.k2d" ]] || [[ -f "$db_path/taxo.k2d" ]]; then
            echo "  Database files detected"
            found_db=true
            KRAKEN_DB="$db_path"
            break
        else
            echo "  Directory exists but no database files found"
        fi
    fi
done

if [[ "$found_db" == false ]]; then
    echo "INFO: No pre-built Kraken2 databases found"
    echo "  This is normal - databases are large and often downloaded separately"
    echo "  Continuing with database-free tests..."
fi

# Test 5: Create minimal test database (if possible)
echo -e "\n5. MINIMAL DATABASE CREATION TEST"
echo "================================="
echo "Attempting to create a minimal test database..."

# Check if kraken2-build is available
if command -v kraken2-build &> /dev/null; then
    echo "PASS: kraken2-build found"
    
    # Create minimal database directory
    mkdir -p test_db
    
    # Try to create a minimal database (this may fail due to missing dependencies)
    echo "Attempting minimal database creation..."
    timeout 30s kraken2-build --download-taxonomy --db test_db 2>&1 | head -10
    
    if [[ -d "test_db/taxonomy" ]]; then
        echo "PASS: Taxonomy download started (may not complete in test time)"
    else
        echo "INFO: Database creation requires internet and time - skipping for test"
    fi
else
    echo "INFO: kraken2-build not found - database creation test skipped"
fi

# Test 6: Classification with existing database (if found)
if [[ "$found_db" == true ]]; then
    echo -e "\n6. CLASSIFICATION WITH EXISTING DATABASE"
    echo "======================================="
    echo "Running classification with found database: $KRAKEN_DB"
    
    timeout 60s $KRAKEN2_CMD --db "$KRAKEN_DB" --output test_output.txt --report test_report.txt test_sequences.fasta 2>&1
    
    if [[ $? -eq 0 ]] && [[ -f "test_output.txt" ]]; then
        echo "PASS: Classification completed successfully"
        echo "  Output file: test_output.txt"
        echo "  Report file: test_report.txt"
        
        # Analyze results
        classified=$(grep -c "^C" test_output.txt 2>/dev/null || echo "0")
        unclassified=$(grep -c "^U" test_output.txt 2>/dev/null || echo "0")
        total_seqs=$(wc -l < test_output.txt)
        
        echo "  Classification results:"
        echo "    Total sequences processed: $total_seqs"
        echo "    Classified: $classified"
        echo "    Unclassified: $unclassified"
        
        if [[ -f "test_report.txt" ]] && [[ -s "test_report.txt" ]]; then
            echo "  Top classifications:"
            head -10 test_report.txt
        fi
    else
        echo "INFO: Classification test timed out or failed (this is normal without proper database)"
    fi
else
    echo -e "\n6. CLASSIFICATION TEST SKIPPED"
    echo "============================="
    echo "No database available for classification test"
    echo "This is normal - Kraken2 databases are large and must be downloaded separately"
fi

# Test 7: Output format validation
echo -e "\n7. OUTPUT FORMAT VALIDATION"
echo "==========================="

if [[ -f "test_output.txt" ]]; then
    echo "Validating Kraken2 output format..."
    
    # Check output format
    valid_lines=0
    total_lines=$(wc -l < test_output.txt)
    
    while IFS= read -r line; do
        # Kraken2 output format: C/U \t seqID \t taxID \t length \t LCA_mapping
        if [[ $line =~ ^[CU][[:space:]] ]]; then
            ((valid_lines++))
        fi
    done < test_output.txt
    
    echo "  Valid output lines: $valid_lines/$total_lines"
    
    if [[ $valid_lines -eq $total_lines ]]; then
        echo "PASS: Output format validation successful"
    else
        echo "INFO: Some output lines may have different format"
    fi
else
    echo "INFO: No output file to validate"
fi

# Test 8: Performance metrics
echo -e "\n8. PERFORMANCE METRICS"
echo "====================="

echo "Kraken2 installation metrics:"
if command -v kraken2 &> /dev/null; then
    kraken2_size=$(ls -lh $(which kraken2) | awk '{print $5}')
    echo "  Executable size: $kraken2_size"
fi

echo "Test file metrics:"
if [[ -f "test_sequences.fasta" ]]; then
    test_size=$(ls -lh test_sequences.fasta | awk '{print $5}')
    echo "  Test file size: $test_size"
fi

echo "Generated files:"
ls -la *.txt *.fasta 2>/dev/null | wc -l | xargs echo "  Total output files:"

# Test 9: Error handling
echo -e "\n9. ERROR HANDLING TEST"
echo "====================="
echo "Testing Kraken2 error handling..."

# Test with non-existent database
$KRAKEN2_CMD --db non_existent_db test_sequences.fasta > error_test.log 2>&1
if [[ $? -ne 0 ]]; then
    echo "PASS: Correctly handles non-existent database error"
else
    echo "INFO: Unexpected behavior with non-existent database"
fi

# Test with non-existent input file
$KRAKEN2_CMD --db test_db non_existent_file.fasta > error_test2.log 2>&1
if [[ $? -ne 0 ]]; then
    echo "PASS: Correctly handles non-existent input file error"
else
    echo "INFO: Unexpected behavior with non-existent input file"
fi

# Test 10: Resource usage estimation
echo -e "\n10. RESOURCE USAGE ESTIMATION"
echo "============================="

echo "Memory and CPU considerations for Kraken2:"
echo "  - Standard databases require 8-100+ GB RAM"
echo "  - MiniKraken DB requires ~4 GB RAM"
echo "  - Classification speed: thousands of reads per second"
echo "  - Database build requires significant time and internet"

if [[ -f "test_output.txt" ]]; then
    processing_time="completed in test timeframe"
else
    processing_time="requires database for full testing"
fi
echo "  Test processing: $processing_time"

# Final assessment
echo -e "\n11. FINAL ASSESSMENT"
echo "==================="
total_tests=8
passed_tests=0

# Count successful tests
[[ -f "kraken2_help.txt" ]] && ((passed_tests++))
[[ -f "test_sequences.fasta" ]] && ((passed_tests++))
command -v kraken2 &> /dev/null && ((passed_tests++))
command -v kraken2-build &> /dev/null && ((passed_tests++))

# Add points for successful classification if it occurred
[[ -f "test_output.txt" ]] && ((passed_tests++))

echo "Test summary:"
echo "  Total tests: $total_tests"
echo "  Passed tests: $passed_tests"
echo "  Success rate: $(( passed_tests * 100 / total_tests ))%"

if [[ $passed_tests -eq $total_tests ]]; then
    echo "EXCELLENT: All Kraken2 tests passed!"
    echo "Kraken2 is fully functional for taxonomic classification"
    echo "Note: Full functionality requires downloading appropriate databases"
elif [[ $passed_tests -gt $(( total_tests / 2 )) ]]; then
    echo "GOOD: Most Kraken2 tests passed"
    echo "Kraken2 core functionality is working"
    echo "Download databases for full classification capability"
else
    echo "ATTENTION: Several Kraken2 tests failed"
    echo "Check installation and dependencies"
fi

echo -e "\nKraken2 database recommendations:"
echo "- For testing: Download MiniKraken2 (~4GB)"
echo "- For bacteria/archaea: Standard-8 database (~8GB)"
echo "- For comprehensive analysis: Standard database (~50-100GB)"
echo "- Download command: kraken2-build --download-library bacteria --db \$DBNAME"

echo -e "\n=============================================="
echo "Kraken2 test completed at: $(date)"
echo "Working directory: $(pwd)"
echo "=============================================="
